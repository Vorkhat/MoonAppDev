generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             BigInt           @id
  points         Float            @default(0)
  privileged     Boolean          @default(false)
  language       Language
  invitations    Invitation[]
  completedTasks TaskCompletion[]
  curatedTasks   CuratedTask[]
  completedForms FormCompletion[]
}

model Invitation {
  id       BigInt @id @default(autoincrement())
  useCount Int    @default(0)
  user     User   @relation(fields: [userId], references: [id])
  userId   BigInt
}

view UsersTop {
  id     BigInt @id
  points Float
  rank   Int
}

model Task {
  id          BigInt           @id @default(autoincrement())
  type        TaskType
  url         String
  data        Json             @default("{}") @db.JsonB
  tracker     TaskTracker      @relation(fields: [trackerId], references: [id])
  trackerId   BigInt
  reward      Float
  scaling     Float            @default(1)
  completions TaskCompletion[]
  curations   CuratedTask[]
}

enum TaskType {
  Comment
  Game
  Task
  Invite
}

model TaskCompletion {
  id          BigInt   @id @default(autoincrement())
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      BigInt
  user        User     @relation(fields: [userId], references: [id])
  userId      BigInt
  completedAt DateTime @default(now())
}

view CompletedTaskTypes {
  id     BigInt
  type   TaskType
  count  Int
  reward Float?

  @@unique([id, type])
}

model TaskTracker {
  id    BigInt @id @default(autoincrement())
  data  Json   @default("{}") @db.JsonB
  tasks Task[]
}

model CuratedTask {
  id          BigInt              @id @default(autoincrement())
  category    CuratedTaskCategory
  startedAt   DateTime?
  completedAt DateTime?
  totalReward Float
  user        User                @relation(fields: [userId], references: [id])
  userId      BigInt
  task        Task                @relation(fields: [taskId], references: [id])
  taskId      BigInt
}

enum CuratedTaskCategory {
  New
  Daily
  Sponsored
  Internal
}

enum Language {
  En
  Ru
}

model LocalizationItem {
  id         BigInt              @id @default(autoincrement())
  values     LocalizationValue[]
  formTitles Form[]              @relation(name: "formTitle")
}

model LocalizationValue {
  id               BigInt
  language         Language
  value            String?
  localizationItem LocalizationItem @relation(fields: [id], references: [id])

  @@id([id, language])
}

model Form {
  id          BigInt           @id @default(autoincrement())
  title       LocalizationItem @relation(fields: [titleId], references: [id], name: "formTitle")
  titleId     BigInt
  defaultStep FormStep?        @relation(name: "defaultStep")
  steps       FormStep[]       @relation(name: "stepOwnerForm")
  completions FormCompletion[]
  reward      Float?
}

model FormStep {
  id                BigInt              @id @default(autoincrement())
  form              Form                @relation(fields: [formId], references: [id], name: "stepOwnerForm")
  formId            BigInt
  content           Json                @default("[]") @db.JsonB
  completions       FormCompletion[]
  defaultStepForm   Form?               @relation(fields: [defaultStepFormId], references: [id], name: "defaultStep")
  defaultStepFormId BigInt?             @unique
  completedSteps    FormCompletedStep[]
  order             Int

  @@unique([formId, order])
}

model FormCompletion {
  id             BigInt              @id @default(autoincrement())
  form           Form                @relation(fields: [formId], references: [id])
  formId         BigInt
  user           User                @relation(fields: [userId], references: [id])
  userId         BigInt
  completedAt    DateTime?
  startedAt      DateTime            @default(now())
  currentStep    FormStep            @relation(fields: [currentStepId], references: [id])
  currentStepId  BigInt
  completedSteps FormCompletedStep[]
}

model FormCompletedStep {
  completionId BigInt
  stepId       BigInt
  completion   FormCompletion @relation(fields: [completionId], references: [id])
  step         FormStep       @relation(fields: [stepId], references: [id])
  completedAt  DateTime       @default(now())
  data         Json           @default("{}") @db.JsonB

  @@id([completionId, stepId])
}
